{"code":"import _intersection from 'lodash.intersection';\r\nimport _union from 'lodash.union';\r\nimport _difference from 'lodash.difference';\r\nimport _findIndex from 'lodash.findindex';\r\nimport _minBy from 'lodash.minby';\r\n/**\r\n *\r\n * @param arrays\r\n */\r\nexport function intersection() {\r\n    var arrays = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        arrays[_i] = arguments[_i];\r\n    }\r\n    return _intersection.apply(void 0, arrays);\r\n}\r\n/**\r\n *\r\n * @param arrays\r\n */\r\nexport function union() {\r\n    var arrays = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        arrays[_i] = arguments[_i];\r\n    }\r\n    return _union.apply(void 0, arrays);\r\n}\r\n/**\r\n *\r\n * @param arrays\r\n */\r\nexport function difference() {\r\n    var arrays = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        arrays[_i] = arguments[_i];\r\n    }\r\n    return _difference.apply(void 0, arrays);\r\n}\r\n/**\r\n *\r\n * @param array\r\n * @param predicate\r\n * @param fromIndex\r\n */\r\nexport function findIndex(array, predicate, fromIndex) {\r\n    if (!Array.prototype.findIndex) {\r\n        return array.findIndex(predicate);\r\n    }\r\n    return _findIndex(array, predicate, fromIndex);\r\n}\r\n/**\r\n *\r\n * @param array\r\n * @param iteratee\r\n */\r\nexport function minBy(array, iteratee) {\r\n    return _minBy(array, iteratee);\r\n}\r\n/**\r\n *\r\n *\r\n * @template T\r\n * @param {T[]} arr\r\n * @returns {T} - last element in array or undefined if no elemnets.\r\n * @memberof ArrayUtil\r\n */\r\nexport function last(arr) {\r\n    return arr && arr.length ? arr[arr.length - 1] : undefined;\r\n}\r\n/**\r\n *\r\n * @param array\r\n */\r\nexport function uniq(array) {\r\n    return Array.from(new Set(array));\r\n}\r\n//# sourceMappingURL=index.js.map","map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/array/index.ts"],"names":[],"mappings":"AAAA,OAAO,aAAa,MAAM,qBAAqB,CAAC;AAChD,OAAO,MAAM,MAAM,cAAc,CAAC;AAClC,OAAO,WAAW,MAAM,mBAAmB,CAAC;AAC5C,OAAO,UAAU,MAAM,kBAAkB,CAAC;AAC1C,OAAO,MAAM,MAAM,cAAc,CAAC;AAElC;;;GAGG;AACH,MAAM;IAAuB,gBAAS;SAAT,UAAS,EAAT,qBAAS,EAAT,IAAS;QAAT,2BAAS;;IACpC,MAAM,CAAC,aAAa,eAAI,MAAM,EAAE;AAClC,CAAC;AAED;;;GAGG;AACH,MAAM;IAAgB,gBAAS;SAAT,UAAS,EAAT,qBAAS,EAAT,IAAS;QAAT,2BAAS;;IAC7B,MAAM,CAAC,MAAM,eAAI,MAAM,EAAE;AAC3B,CAAC;AAED;;;GAGG;AACH,MAAM;IAAqB,gBAAS;SAAT,UAAS,EAAT,qBAAS,EAAT,IAAS;QAAT,2BAAS;;IAClC,MAAM,CAAC,WAAW,eAAI,MAAM,EAAE;AAChC,CAAC;AAED;;;;;GAKG;AACH,MAAM,oBAAoB,KAAK,EAAE,SAAU,EAAE,SAAU;IACrD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;AACjD,CAAC;AAED;;;;GAIG;AACH,MAAM,gBAAgB,KAAK,EAAE,QAAQ;IACnC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AACjC,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,eAAkB,GAAQ;IAC9B,MAAM,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;AAC7D,CAAC;AAED;;;GAGG;AACH,MAAM,eAAe,KAAK;IACtB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;AACtC,CAAC"},"dts":{"name":"/Users/netanelbasal/www/FE/utils/array/index.d.ts","text":"/**\r\n *\r\n * @param arrays\r\n */\r\nexport declare function intersection(...arrays: any[]): any;\r\n/**\r\n *\r\n * @param arrays\r\n */\r\nexport declare function union(...arrays: any[]): any;\r\n/**\r\n *\r\n * @param arrays\r\n */\r\nexport declare function difference(...arrays: any[]): any;\r\n/**\r\n *\r\n * @param array\r\n * @param predicate\r\n * @param fromIndex\r\n */\r\nexport declare function findIndex(array: any, predicate?: any, fromIndex?: any): any;\r\n/**\r\n *\r\n * @param array\r\n * @param iteratee\r\n */\r\nexport declare function minBy(array: any, iteratee: any): any;\r\n/**\r\n *\r\n *\r\n * @template T\r\n * @param {T[]} arr\r\n * @returns {T} - last element in array or undefined if no elemnets.\r\n * @memberof ArrayUtil\r\n */\r\nexport declare function last<T>(arr: T[]): T;\r\n/**\r\n *\r\n * @param array\r\n */\r\nexport declare function uniq(array: any): {}[];\r\n"}}
