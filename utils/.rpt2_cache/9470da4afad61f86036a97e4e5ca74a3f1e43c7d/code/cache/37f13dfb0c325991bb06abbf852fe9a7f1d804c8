{"code":"import _isEmpty from 'lodash.isempty';\r\n/**\r\n *\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport function isFunction(value) {\r\n    return typeof value === 'function';\r\n}\r\n/**\r\n *\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport function isObject(value) {\r\n    return Object.prototype.toString.call(value) === \"[object Object]\";\r\n}\r\n/**\r\n *\r\n * @param value\r\n * @returns {any}\r\n */\r\nexport function isEmpty(value) {\r\n    return _isEmpty(value);\r\n}\r\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\r\nexport function isNumber(value) {\r\n    // parseFloat(value) handles most of the cases we're interested in (it treats null, empty string,\r\n    // and other non-number values as NaN, where Number just uses 0) but it considers the string\r\n    // '123hello' to be a valid number. Therefore we also check if Number(value) is NaN.\r\n    return !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n}\r\n//# sourceMappingURL=index.js.map","map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/validators/index.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,gBAAgB,CAAC;AAEtC;;;;GAIG;AACH,MAAM,qBAAqB,KAAK;IAC9B,MAAM,CAAC,OAAO,KAAK,KAAK,UAAU,CAAC;AACrC,CAAC;AAED;;;;GAIG;AACH,MAAM,mBAAmB,KAAK;IAC5B,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,iBAAiB,CAAC;AACrE,CAAC;AAED;;;;GAIG;AACH,MAAM,kBAAkB,KAAK;IAC3B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzB,CAAC;AAED;;;GAGG;AACH,MAAM,mBAAmB,KAAK;IAC1B,iGAAiG;IACjG,4FAA4F;IAC5F,oFAAoF;IACpF,MAAM,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,KAAY,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACrE,CAAC"},"dts":{"name":"/Users/netanelbasal/www/FE/utils/validators/index.d.ts","text":"/**\r\n *\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport declare function isFunction(value: any): boolean;\r\n/**\r\n *\r\n * @param value\r\n * @returns {boolean}\r\n */\r\nexport declare function isObject(value: any): boolean;\r\n/**\r\n *\r\n * @param value\r\n * @returns {any}\r\n */\r\nexport declare function isEmpty(value: any): any;\r\n/**\r\n * Whether the provided value is considered a number.\r\n * @docs-private\r\n */\r\nexport declare function isNumber(value: any): boolean;\r\n"}}
