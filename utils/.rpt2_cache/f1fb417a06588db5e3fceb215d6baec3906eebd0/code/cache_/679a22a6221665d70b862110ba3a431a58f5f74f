{"code":"/** Coerces a data-bound value (typically a string) to a boolean. */\r\nimport { isNumber } from \"../validators\";\r\nexport function toBoolean(value, includeZero) {\r\n    if (includeZero === void 0) { includeZero = false; }\r\n    return value != null && \"\" + value !== 'false' && (includeZero && value !== 0 || !includeZero);\r\n}\r\nexport function toNumber(value, fallbackValue) {\r\n    if (fallbackValue === void 0) { fallbackValue = 0; }\r\n    return isNumber(value) ? Number(value) : fallbackValue;\r\n}\r\n/**\r\n *\r\n * @param value\r\n * @returns {string}\r\n */\r\nexport function toString(value) {\r\n    return (value || '') && value.toString();\r\n}\r\n/** Wraps the provided value in an array, unless the provided value is an array. */\r\nexport function coerceArray(value) {\r\n    return Array.isArray(value) ? value : [value];\r\n}\r\n//# sourceMappingURL=index.js.map","map":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/coercion/index.ts"],"names":[],"mappings":"AAAA,oEAAoE;AACpE,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,MAAM,oBAAoB,KAAU,EAAE,WAA4B;IAA5B,4BAAA,EAAA,mBAA4B;IAChE,MAAM,CAAC,KAAK,IAAI,IAAI,IAAI,KAAG,KAAO,KAAK,OAAO,IAAI,CAAC,WAAW,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACjG,CAAC;AAQD,MAAM,mBAAmB,KAAU,EAAE,aAAiB;IAAjB,8BAAA,EAAA,iBAAiB;IACpD,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC;AACzD,CAAC;AAGD;;;;GAIG;AACH,MAAM,mBAAmB,KAAU;IACjC,MAAM,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC3C,CAAC;AAED,mFAAmF;AACnF,MAAM,sBAAyB,KAAc;IAC3C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAChD,CAAC"},"dts":{"name":"/Users/netanelbasal/www/FE/utils/coercion/index.d.ts","text":"export declare function toBoolean(value: any, includeZero?: boolean): boolean;\r\n/**\r\n *\r\n * @param value\r\n */\r\nexport declare function toNumber(value: any): number;\r\nexport declare function toNumber<D>(value: any, fallback: D): number | D;\r\n/**\r\n *\r\n * @param value\r\n * @returns {string}\r\n */\r\nexport declare function toString(value: any): string;\r\n/** Wraps the provided value in an array, unless the provided value is an array. */\r\nexport declare function coerceArray<T>(value: T | T[]): T[];\r\n"}}
